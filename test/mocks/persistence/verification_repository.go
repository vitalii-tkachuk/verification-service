// Code generated by mockery v2.15.0. DO NOT EDIT.

package persistence

import (
	context "context"

	aggregate "github.com/vitalii-tkachuk/verification-service/internal/domain/verification/aggregate"

	mock "github.com/stretchr/testify/mock"
)

// VerificationRepository is an autogenerated mocks type for the VerificationRepository type
type VerificationRepository struct {
	mock.Mock
}

// Add provides a mocks function with given fields: ctx, verification
func (_m *VerificationRepository) Add(ctx context.Context, verification *aggregate.Verification) error {
	ret := _m.Called(ctx, verification)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *aggregate.Verification) error); ok {
		r0 = rf(ctx, verification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUUID provides a mocks function with given fields: ctx, uuid
func (_m *VerificationRepository) GetByUUID(ctx context.Context, uuid aggregate.VerificationUUID) (*aggregate.Verification, error) {
	ret := _m.Called(ctx, uuid)

	var r0 *aggregate.Verification
	if rf, ok := ret.Get(0).(func(context.Context, aggregate.VerificationUUID) *aggregate.Verification); ok {
		r0 = rf(ctx, uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aggregate.Verification)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, aggregate.VerificationUUID) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mocks function with given fields: ctx, verification
func (_m *VerificationRepository) Update(ctx context.Context, verification *aggregate.Verification) error {
	ret := _m.Called(ctx, verification)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *aggregate.Verification) error); ok {
		r0 = rf(ctx, verification)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewVerificationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewVerificationRepository creates a new instance of VerificationRepository. It also registers a testing interface on the mocks and a cleanup function to assert the mocks expectations.
func NewVerificationRepository(t mockConstructorTestingTNewVerificationRepository) *VerificationRepository {
	mock := &VerificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
